http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/species/match?name=Cad%2A&strict=FALSE&verbose=TRUE&limit=500
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
      User-Agent: r-curl/4.3 crul/1.0.0 rOpenSci(taxize/0.9.97.95)
      X-USER-AGENT: r-curl/4.3 crul/1.0.0 rOpenSci(taxize/0.9.97.95)
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      date: Wed, 16 Sep 2020 17:21:37 GMT
      content-type: application/json
      access-control-allow-origin: '*'
      access-control-allow-methods: HEAD, GET, POST, DELETE, PUT, OPTIONS
      server: Jetty(9.3.z-SNAPSHOT)
      cache-control: public, max-age=3601
      x-varnish: 942706586 946570321
      age: '200'
      via: 1.1 varnish (Varnish/5.2)
      accept-ranges: bytes
      content-length: '1428'
      connection: keep-alive
    body:
      encoding: ASCII-8BIT
      file: no
      string: eyJjb25maWRlbmNlIjoxMDAsIm5vdGUiOiJNdWx0aXBsZSBlcXVhbCBtYXRjaGVzIGZvciBDYWQiLCJtYXRjaFR5cGUiOiJOT05FIiwiYWx0ZXJuYXRpdmVzIjpbeyJ1c2FnZUtleSI6MTc1ODI1OSwic2NpZW50aWZpY05hbWUiOiJDYSBEeWFyLCAxOTE0IiwiY2Fub25pY2FsTmFtZSI6IkNhIiwicmFuayI6IkdFTlVTIiwic3RhdHVzIjoiQUNDRVBURUQiLCJjb25maWRlbmNlIjotNiwibm90ZSI6IlNpbWlsYXJpdHk6IG5hbWU9LTU7IGF1dGhvcnNoaXA9MDsgY2xhc3NpZmljYXRpb249LTI7IHJhbms9MDsgc3RhdHVzPTEiLCJtYXRjaFR5cGUiOiJGVVpaWSIsImtpbmdkb20iOiJBbmltYWxpYSIsInBoeWx1bSI6IkFydGhyb3BvZGEiLCJvcmRlciI6IkxlcGlkb3B0ZXJhIiwiZmFtaWx5IjoiRGFsY2VyaWRhZSIsImdlbnVzIjoiQ2EiLCJraW5nZG9tS2V5IjoxLCJwaHlsdW1LZXkiOjU0LCJjbGFzc0tleSI6MjE2LCJvcmRlcktleSI6Nzk3LCJmYW1pbHlLZXkiOjUzMTgsImdlbnVzS2V5IjoxNzU4MjU5LCJzeW5vbnltIjpmYWxzZSwiY2xhc3MiOiJJbnNlY3RhIn0seyJ1c2FnZUtleSI6MTE3MTgxMiwic2NpZW50aWZpY05hbWUiOiJDYXIgQmxhY2tidXJuLCAxODk3IiwiY2Fub25pY2FsTmFtZSI6IkNhciIsInJhbmsiOiJHRU5VUyIsInN0YXR1cyI6IkFDQ0VQVEVEIiwiY29uZmlkZW5jZSI6LTYsIm5vdGUiOiJTaW1pbGFyaXR5OiBuYW1lPS01OyBhdXRob3JzaGlwPTA7IGNsYXNzaWZpY2F0aW9uPS0yOyByYW5rPTA7IHN0YXR1cz0xIiwibWF0Y2hUeXBlIjoiRlVaWlkiLCJraW5nZG9tIjoiQW5pbWFsaWEiLCJwaHlsdW0iOiJBcnRocm9wb2RhIiwib3JkZXIiOiJDb2xlb3B0ZXJhIiwiZmFtaWx5IjoiQ2FyaWRhZSIsImdlbnVzIjoiQ2FyIiwia2luZ2RvbUtleSI6MSwicGh5bHVtS2V5Ijo1NCwiY2xhc3NLZXkiOjIxNiwib3JkZXJLZXkiOjE0NzAsImZhbWlseUtleSI6NDI5MjQ0OCwiZ2VudXNLZXkiOjExNzE4MTIsInN5bm9ueW0iOmZhbHNlLCJjbGFzcyI6Ikluc2VjdGEifSx7InVzYWdlS2V5Ijo0NTc3NDEzLCJzY2llbnRpZmljTmFtZSI6IkNhcyBCYWtlciAmIFdoYXJ0b24sIDE5NTIiLCJjYW5vbmljYWxOYW1lIjoiQ2FzIiwicmFuayI6IkdFTlVTIiwic3RhdHVzIjoiRE9VQlRGVUwiLCJjb25maWRlbmNlIjotMTIsIm5vdGUiOiJTaW1pbGFyaXR5OiBuYW1lPS01OyBhdXRob3JzaGlwPTA7IGNsYXNzaWZpY2F0aW9uPS0yOyByYW5rPTA7IHN0YXR1cz0tNSIsIm1hdGNoVHlwZSI6IkZVWlpZIiwia2luZ2RvbSI6IkFuaW1hbGlhIiwicGh5bHVtIjoiQXJ0aHJvcG9kYSIsImdlbnVzIjoiQ2FzIiwia2luZ2RvbUtleSI6MSwicGh5bHVtS2V5Ijo1NCwiY2xhc3NLZXkiOjM2NywiZ2VudXNLZXkiOjQ1Nzc0MTMsInN5bm9ueW0iOmZhbHNlLCJjbGFzcyI6IkFyYWNobmlkYSJ9XSwic3lub255bSI6ZmFsc2V9
  recorded_at: 2020-09-16 17:25:00 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
- request:
    method: get
    uri: https://api.gbif.org/v1/species/search?q=Cad%2A&datasetKey=d7dddbf4-2cf0-4f39-9b2a-bb099caae36c&limit=500
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
      User-Agent: r-curl/4.3 crul/1.0.0 rOpenSci(taxize/0.9.97.95)
      X-USER-AGENT: r-curl/4.3 crul/1.0.0 rOpenSci(taxize/0.9.97.95)
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      date: Wed, 16 Sep 2020 17:21:57 GMT
      content-type: application/json
      access-control-allow-origin: '*'
      access-control-allow-methods: HEAD, GET, POST, DELETE, PUT, OPTIONS
      server: Jetty(9.3.z-SNAPSHOT)
      cache-control: public, max-age=600
      x-varnish: 854139993 960823861
      age: '181'
      via: 1.1 varnish (Varnish/5.2)
      accept-ranges: bytes
      content-length: '155541'
      connection: keep-alive
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-09-16 17:25:00 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
